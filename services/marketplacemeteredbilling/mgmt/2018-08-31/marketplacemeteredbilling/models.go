package marketplacemeteredbilling

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "encoding/json"
    "github.com/Azure/go-autorest/autorest"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/marketplacemeteredbilling/mgmt/2018-08-31/marketplacemeteredbilling"

            // ErrorResponse error response indicates Microsoft.MarketplaceMeteredBilling service is not able to
            // process the incoming request. The reason is provided in the error message.
            type ErrorResponse struct {
            // Error - The details of the error.
            Error *ErrorResponseError `json:"error,omitempty"`
            }

            // ErrorResponseError the details of the error.
            type ErrorResponseError struct {
            // Code - READ-ONLY; Error code.
            Code *string `json:"code,omitempty"`
            // Message - READ-ONLY; Error message indicating why the operation failed.
            Message *string `json:"message,omitempty"`
            }

            // UsageEvent the UsageEvent endpoint allows you to emit usage events for a specific purchased entity
            type UsageEvent struct {
            autorest.Response `json:"-"`
            // UsageEventProperties - Represents the properties of the resource.
            *UsageEventProperties `json:"properties,omitempty"`
            // ResourceID - Identifier of the resource against which usage is emitted.
            ResourceID *string `json:"resourceId,omitempty"`
            // Quantity - Quantity of the dimension being reported.
            Quantity *float64 `json:"quantity,omitempty"`
            // Dimension - Dimension identifier.
            Dimension *string `json:"dimension,omitempty"`
            // EffectiveStartTime - Time in UTC when the usage event occurred.
            EffectiveStartTime *string `json:"effectiveStartTime,omitempty"`
            // PlanID - Plan associated with the purchased offer.
            PlanID *string `json:"planId,omitempty"`
            }

        // MarshalJSON is the custom marshaler for UsageEvent.
        func (ue UsageEvent)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ue.UsageEventProperties != nil) {
                objectMap["properties"] = ue.UsageEventProperties
                }
                if(ue.ResourceID != nil) {
                objectMap["resourceId"] = ue.ResourceID
                }
                if(ue.Quantity != nil) {
                objectMap["quantity"] = ue.Quantity
                }
                if(ue.Dimension != nil) {
                objectMap["dimension"] = ue.Dimension
                }
                if(ue.EffectiveStartTime != nil) {
                objectMap["effectiveStartTime"] = ue.EffectiveStartTime
                }
                if(ue.PlanID != nil) {
                objectMap["planId"] = ue.PlanID
                }
                return json.Marshal(objectMap)
        }
        // UnmarshalJSON is the custom unmarshaler for UsageEvent struct.
        func (ue *UsageEvent) UnmarshalJSON(body []byte) error {
        var m map[string]*json.RawMessage
        err := json.Unmarshal(body, &m)
        if err != nil {
        return err
        }
        for k, v := range  m {
        switch k {
                case "properties":
    if v != nil {
        var usageEventProperties UsageEventProperties
        err = json.Unmarshal(*v, &usageEventProperties)
    if err != nil {
    return err
    }
        ue.UsageEventProperties = &usageEventProperties
    }
                case "resourceId":
    if v != nil {
        var resourceID string
        err = json.Unmarshal(*v, &resourceID)
    if err != nil {
    return err
    }
        ue.ResourceID = &resourceID
    }
                case "quantity":
    if v != nil {
        var quantity float64
        err = json.Unmarshal(*v, &quantity)
    if err != nil {
    return err
    }
        ue.Quantity = &quantity
    }
                case "dimension":
    if v != nil {
        var dimension string
        err = json.Unmarshal(*v, &dimension)
    if err != nil {
    return err
    }
        ue.Dimension = &dimension
    }
                case "effectiveStartTime":
    if v != nil {
        var effectiveStartTime string
        err = json.Unmarshal(*v, &effectiveStartTime)
    if err != nil {
    return err
    }
        ue.EffectiveStartTime = &effectiveStartTime
    }
                case "planId":
    if v != nil {
        var planID string
        err = json.Unmarshal(*v, &planID)
    if err != nil {
    return err
    }
        ue.PlanID = &planID
    }
            }
        }

        return nil
        }

            // UsageEventProperties usageEvent definition
            type UsageEventProperties struct {
            // ResourceID - Identifier of the resource against which usage is emitted.
            ResourceID *string `json:"resourceId,omitempty"`
            // Quantity - Quantity of the dimension being reported.
            Quantity *float64 `json:"quantity,omitempty"`
            // Dimension - Dimension identifier.
            Dimension *string `json:"dimension,omitempty"`
            // EffectiveStartTime - Time in UTC when the usage event occurred.
            EffectiveStartTime *string `json:"effectiveStartTime,omitempty"`
            // PlanID - Plan associated with the purchased offer.
            PlanID *string `json:"planId,omitempty"`
            }

